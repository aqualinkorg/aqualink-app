{
  "extends": [
    "react-app",
    "airbnb",
    "plugin:jsx-a11y/recommended",
    "prettier",
    "prettier/react",
    "plugin:react/jsx-runtime"
  ],
  "parser": "@typescript-eslint/parser",
  "plugins": [
    "jsx-a11y",
    "fp",
    "@typescript-eslint",
    "prettier",
    "import"
  ],
  "rules": {
    // Disable default rule for TS rule
    "no-use-before-define": "off",
    "no-unused-vars": "off",
    "no-shadow": "off",
    "no-redeclare": "off",
    "@typescript-eslint/no-use-before-define": "warn",
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^props$",
        "ignoreRestSiblings": true
      }
    ],
    "@typescript-eslint/no-shadow": "error",
    "@typescript-eslint/no-redeclare": "error",
    // Allow JSX within .js files
    "react/jsx-filename-extension": [
      1,
      {
        "extensions": [
          ".js",
          ".jsx",
          ".ts",
          ".tsx"
        ]
      }
    ],
    // Allow props spreading in React
    "react/jsx-props-no-spreading": 0,
    "react/prop-types": 0,
    "react/require-default-props": 0,
    // Allow named exports only files
    "import/prefer-default-export": 0,
    "object-curly-spacing": [
      "error",
      "always",
      {
        "arraysInObjects": true,
        "objectsInObjects": true
      }
    ],
    // More verbose prettier suggestions
    "prettier/prettier": [
      "warn"
    ],
    "import/extensions": [
      "error",
      "ignorePackages",
      {
        "js": "never",
        "jsx": "never",
        "ts": "never",
        "tsx": "never"
      }
    ],
    // Warnings to enforce functional programming styles - e.g. no unintended mutations
    "fp/no-delete": "warn",
    "fp/no-mutating-assign": "warn",
    "fp/no-mutating-methods": [
      "warn",
      {
        "allowedObjects": [
          "_"
        ]
      }
    ],
    "fp/no-mutation": [
      "warn",
      {
        "commonjs": true,
        "allowThis": true,
        "exceptions": [
          {
            "property": "propTypes"
          },
          {
            "property": "components"
          },
          {
            "property": "current"
          }
        ]
      }
    ],
    "no-console": [
      "warn",
      {
        "allow": [
          "warn",
          "error"
        ]
      }
    ],
    "lines-between-class-members": "off",
    "max-classes-per-file": "off",
    "import/no-extraneous-dependencies": [
      "error",
      {
        "devDependencies": [
          "**/*.test.{ts,tsx}",
          "**/*.spec.{ts,tsx}"
        ]
      }
    ]
  },
  "settings": {
    "import/resolver": {
      "node": {
        "moduleDirectory": [
          "node_modules",
          "./src"
        ],
        "extensions": [
          ".js",
          ".jsx",
          ".ts",
          ".tsx"
        ]
      }
    },
    "import/parsers": {
      "@typescript-eslint/parser": [
        ".ts",
        ".tsx"
      ]
    },
    "typescript": {
      // always try to resolve types under `<roo/>@types` directory even it doesn't contain any source code, like `@types/unist`
      "alwaysTryTypes": true
    }
  },
  "ignorePatterns": [
    "**/src/serviceWorker.ts"
  ],
  "overrides": [
    // Don't warn about reassignment in spec files so that we can use before blocks to assign to scoped variables.
    {
      "files": "**/*.{spec,test}.{ts,tsx}",
      "rules": {
        "fp/no-mutation": "off"
      }
    },
    // no-undef rule is useless in ts: https://github.com/typescript-eslint/typescript-eslint/blob/master/docs/getting-started/linting/FAQ.md
    {
      "files": ["*.{ts,tsx}"],
      "rules": {
        "no-undef": "off"
      }
    }
  ]
}
